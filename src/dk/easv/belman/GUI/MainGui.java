package dk.easv.belman.GUI;

import dk.easv.belman.BE.Cut;
import dk.easv.belman.BE.Item;
import dk.easv.belman.BE.ItemList;
import dk.easv.belman.BE.Operator;
import dk.easv.belman.BE.ProductionOrder;
import dk.easv.belman.BE.SalesOrder;
import dk.easv.belman.BE.SalesOrderList;
import dk.easv.belman.BE.StockItem;
import dk.easv.belman.BE.StockItemList;
import dk.easv.belman.BLL.Calculation;
import dk.easv.belman.BLL.Filter;
import dk.easv.belman.BLL.ListManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.decorator.ColorHighlighter;
import org.jdesktop.swingx.decorator.ComponentAdapter;
import org.jdesktop.swingx.decorator.HighlightPredicate;

public class MainGui extends javax.swing.JFrame {

    // Sleeve/Item table and it's model.
    private JXTable tblSleeves;
    private SleeveTableModel sleeveModel;
    // Currently selected Item/Sleeve from the table.
    private Item selectedItem;
    // Currently selected operator
    private Operator operator;
    // Stock table and it's model.
    private JXTable tblStock;
    private StockTableModel stockModel;
    // Currently selected StockItem from the table.
    private StockItem selectedStockItem;
    // BLL object.
    private Filter filter;
    private Calculation calc;
    private ListManager listManager;
    // Timers for calculating time for each cut;
    private Date startTime;
    private Date endTime;

    /**
     * Constructor for the Main Form.
     */
    public MainGui() {
        initComponents(); // Initialize the components created by the NetBeans Designer.
        init(); // Initialize all the other components and variables created by us.
    }

    /**
     *
     * @param showNewPopup
     */
    public void scheduledUpdate(boolean newOrders) {
        if (newOrders) {
            //int response = JOptionPane.showConfirmDialog(null, "There are new orders! Do you want to refresh the list?", "New orders", JOptionPane.YES_NO_OPTION);
            //if (response == 0) {
            updateStockTableModel(filter.filterBySleeve(Main.allStockData, selectedItem));
            //}
        }
    }

    /**
     * Initializes the components that were not generated by the NetBeans
     * Designer.
     */
    private void init() {
        // BLL object for the filtering.
        filter = new Filter();
        listManager = new ListManager();
        calc = new Calculation();

        // Sleeve table
        tblSleeves = new JXTable(); // Creates an empty JXTable (from SwingX 1.6.1) for now.
        JScrollPane sp = new JScrollPane(tblSleeves); // Creates a Scroll Pane where the table will be.
        sleeveModel = new SleeveTableModel(getAllSleevesNotDone()); // Initializes the SleeveTableModel.
        tblSleeves.setModel(sleeveModel); // Sets the table model.
        tblSleeves.setDragEnabled(false); // Dragging is disabled.
        tblSleeves.setColumnControlVisible(true); // Column control settings are enabled.
        tblSleeves.packAll(); // Packs the table.
        tblSleeves.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Only one selection is allowed per table.
        tblSleeves.setSortable(false);

        final HighlightPredicate myPredicate = new HighlightPredicate() {
            @Override
            public boolean isHighlighted(Component renderer, ComponentAdapter adapter) {
                return ListManager.isUrgent(adapter.getString(0));
            }
        };
        ColorHighlighter highlighter = new ColorHighlighter(myPredicate, Color.RED, null);
        tblSleeves.addHighlighter(highlighter);

        pnlCenter.setLayout(new BorderLayout()); // Sets the layout for the center JPanel.
        pnlCenter.add(sp); // Adds the Scroll Pane with the table to the JPanel on the center.
        addListeners(tblSleeves); // Add key and click listeners.

        // Stock table
        tblStock = new JXTable(); // Creates an empty JXTable (from SwingX 1.6.1) for now.
        JScrollPane sf = new JScrollPane(tblStock); // Creates a Scroll Pane where the table will be.
        stockModel = new StockTableModel(Main.allStockData); // Initializes the StockTableModel.
        tblStock.setModel(stockModel); // Sets the table model.
        tblSleeves.setDragEnabled(false); // Dragging is disabled.
        tblStock.setColumnControlVisible(true); // Column control settings are enabled.
        tblStock.packAll(); // Packs the table.
        tblStock.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Only one selection is allowed per table.
        tblStock.setSortable(false);

        pnlWest.setLayout(new BorderLayout()); // Sets the layout for the west JPanel.
        pnlWest.add(sf); // Adds the Scroll Pane with the table to the JPanel on the west.
        addListeners(tblStock); // Add key and click listeners.

        // Populate OperatorComboBox on the jpCut
        pupulateOperatorComboBox();


    }

    /**
     * This method populates the cmbbxOperator with the Operators that do exist
     * in the database.
     */
    private void pupulateOperatorComboBox() {
        DefaultComboBoxModel operatorModel = new DefaultComboBoxModel();
        for (Operator op : Main.allOperatorData.getList()) {
            operatorModel.addElement(op);
        }
        cmbbxOperator.setModel(operatorModel);
    }

    /**
     * Adds Mouse- and KeyListener to the specified table.
     *
     * @param c The component to which the ActionListeners will be added.
     */
    private void addListeners(final JXTable c) {
        // Start of the MouseListener.
        c.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // In case of any clicks...
                if (e.getSource().equals(tblSleeves)) {
                    tblStock.clearSelection(); // Clear the selection.
                    selectedItem = sleeveModel.getItemByRow(tblSleeves.getSelectedRow()); // Set the new selection.
                } else {
                    tblSleeves.clearSelection(); // Clear the selection.
                    selectedStockItem = stockModel.getStockByRow(tblStock.getSelectedRow()); // Set the new selection.

                }

                if (e.getClickCount() == 2) {  // In case of a double click...
                    if (e.getSource().equals(tblSleeves)) {
                        selectedItem = sleeveModel.getItemByRow(tblSleeves.getSelectedRow()); // Set the selected Item/Sleeve.
                        // Filter the table with StockItems, by the currently selected Item/Sleeve.
                        updateStockTableModel(filter.filterBySleeve(Main.allStockData, selectedItem));

                        // Set the selected Item/Sleeve ready-to-cut.
                        txtSleeve.setText(sleeveModel.getValueAt(tblSleeves.getSelectedRow(), 0).toString());
                        txtQuantity.setText(String.valueOf(listManager.getRemaningCuts(Main.allCuts, selectedItem)));
                    } else {
                        selectedStockItem = stockModel.getStockByRow(tblStock.getSelectedRow()); // Set the selected StockItem.
                        // Filter the table with Items/Sleeves, by the currently selected StockItem.
                        updateSleeveTableModel(null, filter.filterByStock(getAllSleevesNotDone(), selectedStockItem));
                        // Set the selected StockItem ready-to-cut.
                        txtStockItem.setText(selectedStockItem.getCode());
                    }
                    setCutAmount();
                }

            }
        });
        // End of the MouseListener.
    }

    /**
     * This method sets the txtCutAmount to the possible available cut amount.
     * If te possible amount is greater than the needed amount, the cut amount
     *
     * is set to the needed amount, if less it's set to the possible cut amount.
     */
    private void setCutAmount() {
        if (selectedItem != null && selectedStockItem != null) {
            if (calc.canCut(selectedStockItem, selectedItem)) {
                int cutAmount = calc.canCutHowMany(selectedStockItem, selectedItem); // Gets the actual amount possible to cut
                if (cutAmount > listManager.getRemaningCuts(Main.allCuts, selectedItem)) { // Checks if the possible amount is greater than the quantity needed
                    txtCutAmount.setText(String.valueOf(listManager.getRemaningCuts(Main.allCuts, selectedItem))); // In case possible amount is greater, set the amount to the needed amount
                } else {
                    txtCutAmount.setText(String.valueOf(cutAmount)); // In case possible amount is less, set the amount to the possible amount
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEast = new javax.swing.JSplitPane();
        jpDescription = new javax.swing.JPanel();
        lblDescription = new javax.swing.JLabel();
        lblDescriptionText1 = new javax.swing.JLabel();
        lblDescriptionText2 = new javax.swing.JLabel();
        lblDescriptionText3 = new javax.swing.JLabel();
        lblDescriptiontext4 = new javax.swing.JLabel();
        txtDescription1 = new javax.swing.JTextField();
        txtDescription2 = new javax.swing.JTextField();
        txtDescription3 = new javax.swing.JTextField();
        txtDescription4 = new javax.swing.JTextField();
        lblDescriptionText5 = new javax.swing.JLabel();
        txtDescription5 = new javax.swing.JTextField();
        lblDescriptionText6 = new javax.swing.JLabel();
        txtDescription6 = new javax.swing.JTextField();
        txtDescription7 = new javax.swing.JTextField();
        lblDescriptionText7 = new javax.swing.JLabel();
        jpCut = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSleeve = new javax.swing.JTextField();
        txtStockItem = new javax.swing.JTextField();
        cmbbxOperator = new javax.swing.JComboBox();
        btnCutAction = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        txtCutAmount = new javax.swing.JTextField();
        pnlHeader = new javax.swing.JPanel();
        txtID = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        btnHistory = new javax.swing.JButton();
        pnlCenter = new javax.swing.JPanel();
        pnlWest = new javax.swing.JPanel();
        pnlSpacing = new javax.swing.JPanel();
        lblSleeveTable = new javax.swing.JLabel();
        lblStockTable = new javax.swing.JLabel();
        cmbbxWeekLimit = new javax.swing.JComboBox();
        lblWeekLimit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 1000, 650));
        setPreferredSize(new java.awt.Dimension(1000, 650));

        pnlEast.setDividerLocation(325);
        pnlEast.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        pnlEast.setPreferredSize(new java.awt.Dimension(325, 650));

        jpDescription.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        lblDescription.setText("Description");

        lblDescriptionText1.setText("Text");

        lblDescriptionText2.setText("Text");

        lblDescriptionText3.setText("Text");

        lblDescriptiontext4.setText("Text");

        lblDescriptionText5.setText("Text");

        lblDescriptionText6.setText("Text");

        lblDescriptionText7.setText("Text");

        javax.swing.GroupLayout jpDescriptionLayout = new javax.swing.GroupLayout(jpDescription);
        jpDescription.setLayout(jpDescriptionLayout);
        jpDescriptionLayout.setHorizontalGroup(
            jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescriptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptionText1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptionText2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                        .addComponent(txtDescription2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptionText3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDescription3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptiontext4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDescription4, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptionText5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDescription5, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescription)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptionText6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDescription6, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDescriptionLayout.createSequentialGroup()
                        .addComponent(lblDescriptionText7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                        .addComponent(txtDescription7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpDescriptionLayout.setVerticalGroup(
            jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescriptionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDescription)
                .addGap(18, 18, 18)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptionText1)
                    .addComponent(txtDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptionText2)
                    .addComponent(txtDescription2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptionText3)
                    .addComponent(txtDescription3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptiontext4)
                    .addComponent(txtDescription4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptionText5)
                    .addComponent(txtDescription5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptionText6)
                    .addComponent(txtDescription6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescriptionText7)
                    .addComponent(txtDescription7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pnlEast.setTopComponent(jpDescription);

        jpCut.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jpCut.setForeground(new java.awt.Color(204, 204, 204));

        jLabel2.setText("Operator");

        jLabel3.setText("Selected Sleeve:");

        jLabel4.setText("Selected Stock Item: ");

        jLabel5.setText("Amount to cut");

        jLabel7.setText("Cutting handler");

        txtSleeve.setEditable(false);

        txtStockItem.setEditable(false);

        btnCutAction.setText("Start");
        btnCutAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCutActionActionPerformed(evt);
            }
        });

        jLabel6.setText("Actual cut amount");

        txtQuantity.setEditable(false);

        javax.swing.GroupLayout jpCutLayout = new javax.swing.GroupLayout(jpCut);
        jpCut.setLayout(jpCutLayout);
        jpCutLayout.setHorizontalGroup(
            jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCutLayout.createSequentialGroup()
                        .addComponent(btnCutAction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jpCutLayout.createSequentialGroup()
                        .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpCutLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addComponent(txtStockItem, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpCutLayout.createSequentialGroup()
                                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSleeve, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                    .addComponent(cmbbxOperator, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpCutLayout.createSequentialGroup()
                                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                    .addComponent(txtCutAmount))))
                        .addGap(10, 10, 10))
                    .addGroup(jpCutLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jpCutLayout.setVerticalGroup(
            jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(12, 12, 12)
                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbbxOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSleeve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtStockItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpCutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCutAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCutAction, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(273, Short.MAX_VALUE))
        );

        pnlEast.setRightComponent(jpCut);

        pnlHeader.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        txtID.setToolTipText("Enter RP-Code / SO or PO's ID or Description");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnHistory.setText("History");
        btnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnHistory)
                .addContainerGap())
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOK)
                    .addComponent(btnHistory))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCenter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        pnlCenter.setPreferredSize(new java.awt.Dimension(400, 0));

        javax.swing.GroupLayout pnlCenterLayout = new javax.swing.GroupLayout(pnlCenter);
        pnlCenter.setLayout(pnlCenterLayout);
        pnlCenterLayout.setHorizontalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        pnlCenterLayout.setVerticalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlWest.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        pnlWest.setPreferredSize(new java.awt.Dimension(400, 862));

        javax.swing.GroupLayout pnlWestLayout = new javax.swing.GroupLayout(pnlWest);
        pnlWest.setLayout(pnlWestLayout);
        pnlWestLayout.setHorizontalGroup(
            pnlWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );
        pnlWestLayout.setVerticalGroup(
            pnlWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 813, Short.MAX_VALUE)
        );

        pnlSpacing.setPreferredSize(new java.awt.Dimension(25, 0));

        javax.swing.GroupLayout pnlSpacingLayout = new javax.swing.GroupLayout(pnlSpacing);
        pnlSpacing.setLayout(pnlSpacingLayout);
        pnlSpacingLayout.setHorizontalGroup(
            pnlSpacingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        pnlSpacingLayout.setVerticalGroup(
            pnlSpacingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lblSleeveTable.setText("Sleeve");

        lblStockTable.setText("Stock Item");

        cmbbxWeekLimit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show all", "1 week", "2 week", "3 week", "4 week" }));
        cmbbxWeekLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbxWeekLimitActionPerformed(evt);
            }
        });

        lblWeekLimit.setText("List all within(weeks)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlWest, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlSpacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblStockTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSleeveTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                        .addComponent(lblWeekLimit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbbxWeekLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlCenter, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(pnlEast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSleeveTable)
                            .addComponent(lblStockTable)
                            .addComponent(cmbbxWeekLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWeekLimit))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlSpacing, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                            .addComponent(pnlWest, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                            .addComponent(pnlCenter, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE))
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlEast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if (txtID.getText().isEmpty()) {
            updateSleeveTableModel(null, getAllSleevesNotDone());
            updateStockTableModel(Main.allStockData);
        } else {
            SalesOrderList sol = new SalesOrderList();
            StockItemList sil = new StockItemList();

            boolean hasFound = false;

            while (!hasFound) {
                if (txtID.getText().startsWith("RP")) {
                    for (StockItem s : Main.allStockData.getList()) {
                        if (s.getCode().contains(txtID.getText())) {
                            sil.add(s);
                        }
                        hasFound = true;
                    }
                } else {
                    for (SalesOrder s : Main.allOrderData.getList()) {
                        if (s.getDescription().contains(txtID.getText()) || String.valueOf(s.getId()).contains(txtID.getText())) {
                            if (!sol.hasId(s.getId())) {
                                sol.add(s);
                            }

                            hasFound = true;
                        }
                        for (ProductionOrder p : s.getProductOrderList().getList()) {
                            if (p.getDescription().contains(txtID.getText()) || String.valueOf(p.getId()).contains(txtID.getText())) {
                                if (!sol.hasId(s.getId())) {
                                    sol.add(s);
                                }

                                hasFound = true;

                            }
                        }
                    }
                    if (!hasFound) {
                        JOptionPane.showMessageDialog(this, "Nothing was found from your query", "Nothing found", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                }
            }
            if (hasFound) {
                if (sol.size() > 0) {
                    updateSleeveTableModel(sol, null);
                } else {
                    updateStockTableModel(sil);
                }
            }
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbbxWeekLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbxWeekLimitActionPerformed
        int weeks;
        switch (cmbbxWeekLimit.getSelectedIndex()) {
            case 0: // In case of 'View all' is selected...
                updateSleeveTableModel(null, getAllSleevesNotDone()); // Set back the original SalesOrderList.
                System.out.println("current size: " + sleeveModel.getSList().size() + "\n\n");
                break;
            case 1: // In case '1 week' is selected.
                weeks = 1;
                updateSleeveTableModel(null, listManager.getAllItemsNotDone(filter.getSalesOrderList(Main.allOrderData, weeks)));
                System.out.println("current size: " + sleeveModel.getSList().size() + "\n\n");
                break;
            case 2: // In case '2 week' is selected.
                weeks = 2;
                updateSleeveTableModel(null, listManager.getAllItemsNotDone(filter.getSalesOrderList(Main.allOrderData, weeks)));
                System.out.println("current size: " + sleeveModel.getSList().size() + "\n\n");
                break;
            case 3: // In case '3 week' is selected.
                weeks = 3;
                updateSleeveTableModel(null, listManager.getAllItemsNotDone(filter.getSalesOrderList(Main.allOrderData, weeks)));
                System.out.println("current size: " + sleeveModel.getSList().size() + "\n\n");
                break;
            case 4: // In case '4 week' is selected.
                weeks = 4;
                updateSleeveTableModel(null, listManager.getAllItemsNotDone(filter.getSalesOrderList(Main.allOrderData, weeks)));
                System.out.println("current size: " + sleeveModel.getSList().size() + "\n\n");
                break;
        }
    }//GEN-LAST:event_cmbbxWeekLimitActionPerformed

    private void btnCutActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCutActionActionPerformed
        if (txtStockItem.getText().length() > 0 &&// Makes sure stock item has been set
                txtSleeve.getText().length() > 0)// Makes sure that sleeve has been set
        {

            if (btnCutAction.getText().equals("Start")) {
                startTime = new Date(); // Sets a start time for tracking the time for the cut
//                System.out.println("You started cutting");
                btnCutAction.setText("Stop");
                //System.out.println("SOL SIZE: " + getAllDoneSalesOrder().size());
            } else {
                endTime = new Date(); // Sets a end time for tracking the time for the cut
                long time = endTime.getTime() - startTime.getTime(); // Is the time it took for the cut to finish
//                System.out.println("You stopped cutting");
                btnCutAction.setText("Start");

                System.out.println("Before: " + Main.allCuts.size());

                // Create cut entity based on the information we know.
                Cut cut = new Cut();
                cut.setSleeve(selectedItem);
                cut.setStockItem(selectedStockItem);
                cut.setOperator((Operator) cmbbxOperator.getSelectedItem());
                cut.setTimeSpent(time);
                Date currentDate = new Date();
                cut.setDate(currentDate.getTime());
                cut.setQuantity(Integer.valueOf(txtCutAmount.getText()));

                cut.setWaste(cut.getStockItem().getWidth() - cut.getSleeve().getWidth());
                cut.setArchived(false);

                Main.allCuts.add(cut);
//                System.out.println("After: " + Main.allCuts.size());
                int remainingQuantity = listManager.getRemaningCuts(Main.allCuts, cut.getSleeve());
                txtQuantity.setText(String.valueOf(remainingQuantity));
                setCutAmount();
                // listManager.insertCut(cut);
                if (remainingQuantity == 0) {
                    selectedItem.setDone(true);
                    System.out.println("Is the sleeve you cutted done?: " + selectedItem.isDone());
                    //listManager.updateItem(selectedItem);

                    updateSleeveTableModel(null, filter.filterByStock(getAllSleevesNotDone(), selectedStockItem));

                }

                listManager.insertCut(cut);
                if (remainingQuantity == 0) { // If there are no more cuts to do for that Sleeve.
                    selectedItem.setDone(true); // Sets the selected sleeve entity to done.
//                    System.out.println("Is the sleeve you cutted done?: " + selectedItem.isDone());
                    listManager.updateItem(selectedItem); // Updates the selected sleeve (sets it to done) in the database.
                    listManager.updateStock(calc.updateStockEntity(cut)); // Updates a StockItem entity and the database as well.
                    updateStockTableModel(filter.filterBySleeve(Main.allStockData, selectedItem)); // Refreshes the Stock table.
                    updateSleeveTableModel(null, filter.filterByStock(getAllSleevesNotDone(), selectedStockItem)); // Refreshes the Sleeve table.
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please make sure that values are set", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCutActionActionPerformed

    private void btnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        HistoryFrame chf = new HistoryFrame(this);
    }//GEN-LAST:event_btnHistoryActionPerformed

    /**
     * Returns a sales order list containing all sales order which is not done
     *
     * @return
     */
    private ItemList getAllSleevesNotDone() {
        ItemList iList = new ItemList();
        for (Item item : listManager.getItemList(Main.allOrderData).getList()) {
            if (!item.isDone()) {
                iList.add(item);
            }
        }
        return iList;

    }

    /**
     * Sets a new SalesOrderList or ItemList to the sleeve table. In case sol is
     * null, it will set a new ItemList and vice versa.
     *
     * @param sol The new SalesOrderList, iList The new ItemList
     */
    private void updateSleeveTableModel(SalesOrderList sol, ItemList iList) {
        if (sol != null) {
            sleeveModel.setItemList(sol);
        } else {
            sleeveModel.setItemList(iList);
        }
        sleeveModel.fireTableDataChanged();
    }

    /**
     * Sets a new StockItemList to the stock table.
     *
     * @param sil The new SalesOrderList, iList The new ItemList
     */
    private void updateStockTableModel(StockItemList sil) {
        stockModel.setStockList(sil);
        stockModel.fireTableDataChanged();
    }

    /**
     * Fires the data changes to the table when this method is called.
     *
     */
    public void fireSleeveTableChanges() {
        sleeveModel.fireTableDataChanged();
    }

    /**
     * Takes in multiple Components and sets the visibility option for all.
     *
     * @param visibility A boolean.
     * @param comp All the components.
     */
    public void setVisibleTo(boolean visibility, Component... comp) {
        for (Component c : comp) {
            c.setVisible(visibility);
        }
    }

    /**
     * Takes in multiple JTextFields and sets the editable attribute for all.
     *
     * @param visibility A boolean.
     * @param comp All the components.
     */
    public void setEditableTo(boolean visibility, JTextField... comp) {
        for (JTextField c : comp) {
            c.setEditable(visibility);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCutAction;
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox cmbbxOperator;
    private javax.swing.JComboBox cmbbxWeekLimit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jpCut;
    private javax.swing.JPanel jpDescription;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDescriptionText1;
    private javax.swing.JLabel lblDescriptionText2;
    private javax.swing.JLabel lblDescriptionText3;
    private javax.swing.JLabel lblDescriptionText5;
    private javax.swing.JLabel lblDescriptionText6;
    private javax.swing.JLabel lblDescriptionText7;
    private javax.swing.JLabel lblDescriptiontext4;
    private javax.swing.JLabel lblSleeveTable;
    private javax.swing.JLabel lblStockTable;
    private javax.swing.JLabel lblWeekLimit;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JSplitPane pnlEast;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlSpacing;
    private javax.swing.JPanel pnlWest;
    private javax.swing.JTextField txtCutAmount;
    private javax.swing.JTextField txtDescription1;
    private javax.swing.JTextField txtDescription2;
    private javax.swing.JTextField txtDescription3;
    private javax.swing.JTextField txtDescription4;
    private javax.swing.JTextField txtDescription5;
    private javax.swing.JTextField txtDescription6;
    private javax.swing.JTextField txtDescription7;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSleeve;
    private javax.swing.JTextField txtStockItem;
    // End of variables declaration//GEN-END:variables
}
